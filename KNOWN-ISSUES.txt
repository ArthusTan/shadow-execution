
Global variables: arrays and structs.
String constants (see string.c).
Loading struct pointer (struct-return, ls).
Alloca creating bit failing (size returned is zero). To reproduce: sum.bc.
Unimplemented interpretation for instructions such as landingpad. It does not happen to execute because it is executed only in the case of an exception.  
Upgrade to LLVM 3.3.

Core utilities:

During interpretation:
==============
Strings
	cat

Don't support bit right now:
      ln -s list.txt list.txt.2

Seg fault
    printenv
    rm list.txt
    sha1sum list.txt
    sha224sum list.txt
    sha256sum list.txt
    sha384sum list.txt
    sha512sum list.txt
    uname
    unexpand list.txt
    tty
    tr abc ABC
    truncate -s 5 list.txt
    tee (usage: ls | ./tee.out out)

Failed assertion at call_nounwind:
   uptime
    wc

Failed assertion at KIND_GetSize:
   false --version
   runcon
   sum list.txt
   split -b 22 list.txt list
   tac list.txt
   true --version
   FIXED: users
   uniq list.txt
   FIXED: whoami

Mismatch at store:
   readlink
   realpath
   sync
   tsort list.txt
   unlink list.txt


During instrumentation:
===============
Unsupported KVALUE type.
    date
    ls
    mv
    sleep
    stat
    tail
    timeout
    touch
    vdir

Unknown error:
    md5sum

Broken module:
   df 
   mkidr
   rmdir
   seq
   stdbuf
   stty
   who

Failed assertion at CallInstrumenter:
   sort
   shuf

Failed assertion at getelementptr_array:
   shred list.txt


Next to check: ptx



Passing:
=====
   echo
   pwd
   users
   whoami

Function pointers. - DONE
Intrinsic functions with side effects (e.g., llvm.copy) - DONE
Modelling phi instruction - DONE


  


